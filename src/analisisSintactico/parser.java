
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisisSintactico;

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import intermedio.Param;
import Checkers.Tipo;
import Checkers.TipoOperador;
import Checkers.TypeCheck;
import Checkers.OverflowCheck;
import Errores.ErrorHandler;
import Errores.ErrorSemantico;
import Errores.ErrorSintactico;
import Procesador.GlobalVariables;
import Procesador.EntornoClase;
import Procesador.EntornoFuncion;
import Procesador.Declaracion;
import Procesador.DeclaracionFuncion;
import Procesador.DeclaracionConstante;
import Procesador.DeclaracionClase;
import Procesador.DeclaracionArray;
import Procesador.Identificador;
import SimbolosNoTerminales.*;
import intermedio.I3DUtils;
import intermedio.OperacionTresDirecciones;
import intermedio.InstruccionTresDirecciones;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\044\002\000\002\006" +
    "\004\000\002\007\005\000\002\010\004\000\002\011\005" +
    "\000\002\012\004\000\002\012\002\000\002\043\004\000" +
    "\002\043\002\000\002\041\005\000\002\041\003\000\002" +
    "\042\006\000\002\042\006\000\002\013\007\000\002\037" +
    "\005\000\002\037\002\000\002\040\004\000\002\040\002" +
    "\000\002\022\006\000\002\023\006\000\002\024\005\000" +
    "\002\024\005\000\002\021\006\000\002\025\004\000\002" +
    "\025\002\000\002\027\005\000\002\027\002\000\002\026" +
    "\005\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\006\000\002\030\002\000\002\002\006\000" +
    "\002\033\007\000\002\034\002\000\002\003\004\000\002" +
    "\035\006\000\002\036\006\000\002\004\006\000\002\004" +
    "\002\000\002\005\003\000\002\005\003\000\002\005\004" +
    "\000\002\015\003\000\002\015\005\000\002\016\003\000" +
    "\002\016\005\000\002\017\003\000\002\017\005\000\002" +
    "\020\003\000\002\020\005\000\002\014\004\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\005\000\002\031\004\000\002\031\002\000" +
    "\002\032\005\000\002\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\004\000\001\002\000\004\002\173\001" +
    "\002\000\004\004\007\001\002\000\012\005\035\006\040" +
    "\015\ufff8\016\ufff8\001\002\000\004\035\166\001\002\000" +
    "\006\015\ufffa\016\ufffa\001\002\000\004\002\uffff\001\002" +
    "\000\006\015\016\016\017\001\002\000\004\022\151\001" +
    "\002\000\004\014\024\001\002\000\006\015\ufffb\016\ufffb" +
    "\001\002\000\004\002\ufffe\001\002\000\006\005\020\010" +
    "\021\001\002\000\004\035\023\001\002\000\004\035\022" +
    "\001\002\000\004\022\uffeb\001\002\000\004\022\uffec\001" +
    "\002\000\020\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0" +
    "\015\uffe0\035\uffe0\001\002\000\020\005\035\006\040\007" +
    "\030\011\042\012\045\015\027\035\031\001\002\000\020" +
    "\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\015\uffe3\035" +
    "\uffe3\001\002\000\006\015\uffee\016\uffee\001\002\000\014" +
    "\022\053\030\051\033\062\034\050\035\052\001\002\000" +
    "\010\017\ufff1\022\077\024\076\001\002\000\020\005\uffe2" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\015\uffe2\035\uffe2\001" +
    "\002\000\020\005\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7" +
    "\015\uffd7\035\uffd7\001\002\000\020\005\uffe4\006\uffe4\007" +
    "\uffe4\011\uffe4\012\uffe4\015\uffe4\035\uffe4\001\002\000\004" +
    "\035\140\001\002\000\020\005\uffd6\006\uffd6\007\uffd6\011" +
    "\uffd6\012\uffd6\015\uffd6\035\uffd6\001\002\000\004\014\135" +
    "\001\002\000\004\005\126\001\002\000\004\020\125\001" +
    "\002\000\004\022\122\001\002\000\004\014\117\001\002" +
    "\000\022\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013" +
    "\112\015\uffd8\035\uffd8\001\002\000\004\022\046\001\002" +
    "\000\014\022\uffdd\030\uffdd\033\uffdd\034\uffdd\035\uffdd\001" +
    "\002\000\014\022\053\030\051\033\062\034\050\035\052" +
    "\001\002\000\020\020\uffcb\021\uffcb\023\uffcb\026\uffcb\027" +
    "\uffcb\031\uffcb\032\uffcb\001\002\000\020\020\uffca\021\uffca" +
    "\023\uffca\026\uffca\027\uffca\031\uffca\032\uffca\001\002\000" +
    "\024\020\ufff1\021\ufff1\022\077\023\ufff1\024\076\026\ufff1" +
    "\027\ufff1\031\ufff1\032\ufff1\001\002\000\014\022\053\030" +
    "\051\033\062\034\050\035\052\001\002\000\020\020\uffce" +
    "\021\uffce\023\uffce\026\uffce\027\uffce\031\uffce\032\uffce\001" +
    "\002\000\020\020\uffc8\021\uffc8\023\uffc8\026\uffc8\027\uffc8" +
    "\031\uffc8\032\uffc8\001\002\000\020\020\uffd0\021\uffd0\023" +
    "\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0\001\002\000\014" +
    "\023\066\026\067\027\065\031\064\032\063\001\002\000" +
    "\020\020\uffd2\021\uffd2\023\uffd2\026\uffd2\027\uffd2\031\uffd2" +
    "\032\uffd2\001\002\000\020\020\uffd4\021\uffd4\023\uffd4\026" +
    "\uffd4\027\uffd4\031\uffd4\032\uffd4\001\002\000\020\020\uffc9" +
    "\021\uffc9\023\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\001" +
    "\002\000\014\022\053\030\051\033\062\034\050\035\052" +
    "\001\002\000\014\022\053\030\051\033\062\034\050\035" +
    "\052\001\002\000\014\022\053\030\051\033\062\034\050" +
    "\035\052\001\002\000\004\014\uffde\001\002\000\014\022" +
    "\053\030\051\033\062\034\050\035\052\001\002\000\020" +
    "\020\uffcf\021\uffcf\023\uffcf\026\uffcf\027\uffcf\031\uffcf\032" +
    "\uffcf\001\002\000\020\020\uffcd\021\uffcd\023\uffcd\026\uffcd" +
    "\027\uffcd\031\uffcd\032\uffcd\001\002\000\020\020\uffd3\021" +
    "\uffd3\023\uffd3\026\067\027\065\031\uffd3\032\063\001\002" +
    "\000\020\020\uffd1\021\uffd1\023\uffd1\026\067\027\065\031" +
    "\uffd1\032\uffd1\001\002\000\014\023\075\026\067\027\065" +
    "\031\064\032\063\001\002\000\020\020\uffc7\021\uffc7\023" +
    "\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7\001\002\000\004" +
    "\034\110\001\002\000\016\022\053\023\uffc5\030\051\033" +
    "\062\034\050\035\052\001\002\000\020\020\uffcc\021\uffcc" +
    "\023\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\001\002\000" +
    "\004\023\107\001\002\000\016\021\103\023\uffc3\026\067" +
    "\027\065\031\064\032\063\001\002\000\014\022\053\030" +
    "\051\033\062\034\050\035\052\001\002\000\004\023\uffc6" +
    "\001\002\000\016\021\103\023\uffc3\026\067\027\065\031" +
    "\064\032\063\001\002\000\004\023\uffc4\001\002\000\020" +
    "\020\uffea\021\uffea\023\uffea\026\uffea\027\uffea\031\uffea\032" +
    "\uffea\001\002\000\004\025\111\001\002\000\022\017\ufff2" +
    "\020\ufff2\021\ufff2\023\ufff2\026\ufff2\027\ufff2\031\ufff2\032" +
    "\ufff2\001\002\000\004\014\114\001\002\000\020\005\uffdc" +
    "\006\uffdc\007\uffdc\011\uffdc\012\uffdc\015\uffdc\035\uffdc\001" +
    "\002\000\020\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0" +
    "\015\uffe0\035\uffe0\001\002\000\020\005\035\006\040\007" +
    "\030\011\042\012\045\015\116\035\031\001\002\000\020" +
    "\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9\015\uffd9\035" +
    "\uffd9\001\002\000\020\005\uffe0\006\uffe0\007\uffe0\011\uffe0" +
    "\012\uffe0\015\uffe0\035\uffe0\001\002\000\020\005\035\006" +
    "\040\007\030\011\042\012\045\015\121\035\031\001\002" +
    "\000\020\005\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf\015" +
    "\uffdf\035\uffdf\001\002\000\014\022\053\030\051\033\062" +
    "\034\050\035\052\001\002\000\014\023\124\026\067\027" +
    "\065\031\064\032\063\001\002\000\004\014\uffda\001\002" +
    "\000\020\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\015" +
    "\uffd5\035\uffd5\001\002\000\004\035\127\001\002\000\006" +
    "\017\131\020\132\001\002\000\022\005\ufff4\006\ufff4\007" +
    "\ufff4\011\ufff4\012\ufff4\015\ufff4\016\ufff4\035\ufff4\001\002" +
    "\000\014\022\053\030\051\033\062\034\050\035\052\001" +
    "\002\000\022\005\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6" +
    "\015\ufff6\016\ufff6\035\ufff6\001\002\000\014\020\134\026" +
    "\067\027\065\031\064\032\063\001\002\000\022\005\ufff7" +
    "\006\ufff7\007\ufff7\011\ufff7\012\ufff7\015\ufff7\016\ufff7\035" +
    "\ufff7\001\002\000\020\005\uffe0\006\uffe0\007\uffe0\011\uffe0" +
    "\012\uffe0\015\uffe0\035\uffe0\001\002\000\020\005\035\006" +
    "\040\007\030\011\042\012\045\015\137\035\031\001\002" +
    "\000\022\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\015\uffdb\035\uffdb\001\002\000\010\017\ufff1\020\ufff1" +
    "\024\076\001\002\000\006\017\131\020\132\001\002\000" +
    "\022\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\015\ufff5" +
    "\016\ufff5\035\ufff5\001\002\000\004\017\144\001\002\000" +
    "\014\022\053\030\051\033\062\034\050\035\052\001\002" +
    "\000\014\020\146\026\067\027\065\031\064\032\063\001" +
    "\002\000\020\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3" +
    "\015\ufff3\035\ufff3\001\002\000\014\020\150\026\067\027" +
    "\065\031\064\032\063\001\002\000\020\005\uffe1\006\uffe1" +
    "\007\uffe1\011\uffe1\012\uffe1\015\uffe1\035\uffe1\001\002\000" +
    "\006\005\152\023\uffe8\001\002\000\004\035\162\001\002" +
    "\000\004\023\161\001\002\000\006\021\155\023\uffe6\001" +
    "\002\000\004\005\152\001\002\000\004\023\uffe9\001\002" +
    "\000\006\021\155\023\uffe6\001\002\000\004\023\uffe7\001" +
    "\002\000\004\014\uffed\001\002\000\010\021\uffef\023\uffef" +
    "\024\163\001\002\000\004\025\165\001\002\000\006\021" +
    "\uffe5\023\uffe5\001\002\000\006\021\ufff0\023\ufff0\001\002" +
    "\000\004\014\167\001\002\000\012\005\ufffc\006\ufffc\015" +
    "\ufffc\016\ufffc\001\002\000\006\015\ufffd\016\ufffd\001\002" +
    "\000\012\005\035\006\040\015\ufff8\016\ufff8\001\002\000" +
    "\006\015\ufff9\016\ufff9\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\006\006\003\044\004\001\001\000\002\001" +
    "\001\000\010\007\010\010\007\011\005\001\001\000\006" +
    "\042\170\043\167\001\001\000\002\001\001\000\004\012" +
    "\011\001\001\000\002\001\001\000\010\022\014\023\013" +
    "\024\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\024\001\001\000\024\002\031\003\025" +
    "\005\033\013\032\021\040\033\042\035\043\036\036\042" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\053\015\146\016\060\017\057\020\055\021\054\001" +
    "\001\000\004\037\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\112\001" +
    "\001\000\002\001\001\000\004\034\046\001\001\000\016" +
    "\014\053\015\056\016\060\017\057\020\055\021\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\077" +
    "\001\001\000\016\014\053\015\073\016\060\017\057\020" +
    "\055\021\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\053\015\072" +
    "\016\060\017\057\020\055\021\054\001\001\000\016\014" +
    "\053\015\071\016\060\017\057\020\055\021\054\001\001" +
    "\000\016\014\053\015\070\016\060\017\057\020\055\021" +
    "\054\001\001\000\002\001\001\000\016\014\053\015\067" +
    "\016\060\017\057\020\055\021\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\053\015\101\016\060\017\057\020\055\021\054" +
    "\031\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\103\001\001\000\016\014\053\015\104\016\060" +
    "\017\057\020\055\021\054\001\001\000\002\001\001\000" +
    "\004\032\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\114\001\001\000\024\002\031" +
    "\003\025\005\033\013\032\021\040\033\042\035\043\036" +
    "\036\042\035\001\001\000\002\001\001\000\004\030\117" +
    "\001\001\000\024\002\031\003\025\005\033\013\032\021" +
    "\040\033\042\035\043\036\036\042\035\001\001\000\002" +
    "\001\001\000\016\014\053\015\122\016\060\017\057\020" +
    "\055\021\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\127\001" +
    "\001\000\002\001\001\000\016\014\053\015\132\016\060" +
    "\017\057\020\055\021\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\135\001\001" +
    "\000\024\002\031\003\025\005\033\013\032\021\040\033" +
    "\042\035\043\036\036\042\035\001\001\000\002\001\001" +
    "\000\004\037\140\001\001\000\004\041\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\053\015\144" +
    "\016\060\017\057\020\055\021\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\152\026\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\155\001\001\000\004\026\156" +
    "\001\001\000\002\001\001\000\004\027\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\170\043\171\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





  /** Trata errores de tipo sintáctico **/
	@Override
	public void report_error(String message, Object info) {
		if(info != null) {
			ComplexSymbol simboloEncontrado = (ComplexSymbol) info;
			ErrorHandler.reportaError(new ErrorSintactico(simboloEncontrado));
		}else {
			ErrorHandler.reportaError(""+message);
		}
	}
	
	/** Para controlar que el parser no imprima texto de los errores por pantalla **/
	@Override
	public void syntax_error(Symbol token) {
		report_error("Syntax error", token);
	}
	@Override
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		report_fatal_error("\nCould not recover and keep parsing\n", null);
	}

 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloPrograma start_val = (SimboloPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              SimboloPrograma RESULT =null;
 GlobalVariables.entraBloqueClase(null);
 																GlobalVariables.declaraBuiltInFunctions((EntornoClase)GlobalVariables.entornoActual());
															
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= NT$0 clase 
            {
              SimboloPrograma RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (SimboloPrograma) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloClase c = (SimboloClase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GlobalVariables.saleBloqueClase();
																RESULT = new SimboloPrograma(c);
															
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // clase ::= clase_primera_parte cuerpo LLAVEDER 
            {
              SimboloClase RESULT =null;
		int cppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloClase cpp = (SimboloClase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloCuerpo c = (SimboloCuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					SimboloClase simbolo = cpp;
					simbolo.setCuerpo(c);
					
					// Implementamos una pseuda llamada a la inizialicacion de variables de la clase
					I3DUtils.crea(OperacionTresDirecciones.ETIQUETA, simbolo.getEtiquetaPreInicializacion());
					I3DUtils.crea(OperacionTresDirecciones.CLASE, simbolo.getDeclaracionClase());
					I3DUtils.crea(OperacionTresDirecciones.GOTO, simbolo.getEtiquetaDeclaraciones());
					I3DUtils.crea(OperacionTresDirecciones.ETIQUETA, simbolo.getEtiquetaPostInicializacion());
					
					try {
							// Implementamos la llamada al main 
							DeclaracionFuncion decl = GlobalVariables.getMainFunction();
							I3DUtils.crea(OperacionTresDirecciones.ENTRY_POINT, decl);
					} catch(ErrorSemantico e) {
							ErrorHandler.reportaError(e);
					}
					GlobalVariables.saleBloqueClase();

					RESULT = simbolo;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // clase_primera_parte ::= clase_firma declaraciones 
            {
              SimboloClase RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionClase cf = (DeclaracionClase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloDeclaraciones decls = (SimboloDeclaraciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					I3DUtils.crea(OperacionTresDirecciones.GOTO, cf.getEtiquetaPostInicializacion());
					RESULT = new SimboloClase(cf, decls);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase_primera_parte",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // clase_firma ::= TCLASS VID LLAVEIZQ 
            {
              DeclaracionClase RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					DeclaracionClase decl = null;
					try {
							decl = GlobalVariables.asignaClaseID(i);
							I3DUtils.crea(OperacionTresDirecciones.GOTO, decl.getEtiquetaPreInicializacion());
							I3DUtils.crea(OperacionTresDirecciones.ETIQUETA, decl.getEtiquetaDeclaraciones());
							GlobalVariables.entraBloqueClase(decl);
					} catch(ErrorSemantico e) {
							ErrorHandler.reportaError(e);
					}

					RESULT = decl;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase_firma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= cuerpo funcionDecl 
            {
              SimboloCuerpo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloCuerpo c = (SimboloCuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloFuncionDecl f = (SimboloFuncionDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimboloCuerpo(c,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= 
            {
              SimboloCuerpo RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= declaracion declaraciones 
            {
              SimboloDeclaraciones RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloDeclaracion d = (SimboloDeclaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloDeclaraciones decls = (SimboloDeclaraciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new SimboloDeclaraciones(d, decls);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaraciones ::= 
            {
              SimboloDeclaraciones RESULT =null;
		
				RESULT = null;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicializacion ::= IGUAL Operacion PUNTOCOMA 
            {
              SimboloInicializacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					RESULT = new SimboloInicializacion(o);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicializacion ::= PUNTOCOMA 
            {
              SimboloInicializacion RESULT =null;
		 
					RESULT = new SimboloInicializacion(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= TVAR VID arrayAsig inicializacion 
            {
              SimboloDeclaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloArray a = (SimboloArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloInicializacion init = (SimboloInicializacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
				Boolean esArray = (a != null);
				Declaracion declResultado = null;
				try{
					if(esArray) {
						// Declaracion de un array
						declResultado = GlobalVariables.asignaArray(i,t,a);
						if(init.getSimboloOperacion()!=null) {
							TypeCheck.lanzaErrorArrayNoInicializable();

						// Nota: Si quisieramos gestionar los vectores de forma dinamica, en este punto solo tendriamos
						// que asignar una variable que contuviese el puntero al heap.
						// Por simplificar las cosas, de momento dejamos esto de forma estatica
						// y por tanto no hace falta que hagamos nada. Ya que el array solo es una variable de elementos
						// contiguos. La variable ya se ha definido aqui y el espacio de memoria ya esta reservado para
						// las operaciones porque se tiene en cuenta a la hora de asignar desplazamiento en la tabla
						// de simbolos
						}						
					} else {
						// Declaracion simple
						declResultado = GlobalVariables.asignaID(i,t);
						if(init.getSimboloOperacion()!=null) {
							TypeCheck.typesMatchAsignacion(i,Tipo.getTipo(t), init.getSimboloOperacion().getTipoSubyacente());
							I3DUtils.crea(OperacionTresDirecciones.COPIA, init.getDeclaracionResultado(), declResultado);						
						}
					}
						
				}catch(ErrorSemantico e){
					ErrorHandler.reportaError(e);
				}
				// Ojo! Aqui no es necesario propagar la declaracion ya no hay nadie que pueda usarlo en reducciones
				// posteriores. Así que declResultado muere aqui.
				RESULT = new SimboloDeclaracion(i,Tipo.getTipoSafe(t),esArray,init);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= TFINAL TVAR VID inicializacion 
            {
              SimboloDeclaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloInicializacion init = (SimboloInicializacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				Declaracion decl = null;
				try{
          decl = GlobalVariables.asignaIDConstante(i,t, init.getDeclaracionResultado());

					if(init.getSimboloOperacion()!=null)
						TypeCheck.typesMatchAsignacion(i,Tipo.getTipo(t), init.getSimboloOperacion().getTipoSubyacente());
					else
						TypeCheck.lanzaErrorConstanteNoInicializada(i, t);

        	I3DUtils.crea(OperacionTresDirecciones.COPIA, init.getDeclaracionResultado(), decl);
				}catch(ErrorSemantico e){
					ErrorHandler.reportaError(e);
				}

				RESULT = new SimboloDeclaracion(i, Tipo.getTipoSafe(t), false, init);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= VID arrayAsig IGUAL Operacion PUNTOCOMA 
            {
              SimboloAsignacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SimboloArray a = (SimboloArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				try{
					if(a != null){
						DeclaracionArray decl = GlobalVariables.compruebaIDArray(i);
						TypeCheck.typesMatchAsignacionArray(i, o.getTipoSubyacente());
						// Y aqui va otro hack! :D
						// Cuando tenemos un elemento que es un array, para poder gestionar la indireccion
						// de forma adecuada en el c3@ tenemos que crear una constante intermedia que mantenga
						// la información del indice :+1:
						DeclaracionConstante indice = GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.Integer), a.getNumero());
						// Para copiar un elemento dentro de un array tenemos que asignar un valor
						// en una posicion concreta.
						// Dicha posicion es: tamTipo * idx. Pero como las instrucciones operan sobre variables
						// tenemos que inventarnos
        		I3DUtils.crea(OperacionTresDirecciones.GUARDAR_INDIRECCION, o.getDeclaracionResultado(), decl, indice);						
					} else {
						Declaracion decl = GlobalVariables.compruebaID(i);
						GlobalVariables.compruebaAsignacionPermitida(i);
						TypeCheck.typesMatchAsignacion(GlobalVariables.entornoActual().fullGet(i).getId().getId(), GlobalVariables.entornoActual().fullGet(i).getTipo(), o.getTipoSubyacente());						
					
        		I3DUtils.crea(OperacionTresDirecciones.COPIA, o.getDeclaracionResultado(), decl);
					}
				}catch(ErrorSemantico e){
					ErrorHandler.reportaError(e);
				}
				// Ojo! Aqui no es necesario propagar la declaracion ya no hay nadie que pueda usarlo en reducciones
				// posteriores. Así que declResultado muere aqui
				RESULT = new SimboloAsignacion(i,o);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arrayAsig ::= CORCHIZQ VNUMERO CORCHDER 
            {
              SimboloArray RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimboloArray(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arrayAsig ::= 
            {
              SimboloArray RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arrayDef ::= CORCHIZQ CORCHDER 
            {
              SimboloArray RESULT =null;
		 RESULT = new SimboloArray(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDef",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arrayDef ::= 
            {
              SimboloArray RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDef",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcionDecl ::= funchead LLAVEIZQ contenido LLAVEDER 
            {
              SimboloFuncionDecl RESULT =null;
		int fhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fhright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SimboloFuncionDecl fh = (SimboloFuncionDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloContenido c = (SimboloContenido)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
      GlobalVariables.saleBloqueFuncion(false);
			// Ojo! Este return garantiza que las funciones
			// que no devuelven nada ( return void ) vuelven
			I3DUtils.crea(OperacionTresDirecciones.RETORNO, fh.getDeclaracion());
      // Watch out! fh holds a SimboloFuncionDecl instance
      fh.setContenido(c);
      RESULT = fh; 
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionDecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funchead ::= funcname PARENIZQ args PARENDER 
            {
              SimboloFuncionDecl RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SimboloFuncionDecl fn = (SimboloFuncionDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloArgs a = (SimboloArgs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
      // Propagate the args upwards
      fn.setArgs(a);
      RESULT = fn; 
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funchead",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcname ::= FUNCTION TVAR VID 
            {
              SimboloFuncionDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
      DeclaracionFuncion decl = null;
      try{
          decl = GlobalVariables.asignaFuncionID(i, t); 
      } catch(ErrorSemantico e) {
          ErrorHandler.reportaError(e);
      }   

			// Mismas consideraciones que en la siguiente produccion
      GlobalVariables.entraBloqueFuncion(decl);
      GlobalVariables.asignaEntornoFuncionID(i);

			// Genera lo necesario para poder dirigir las llamadas al procedimiento
			I3DUtils.crea(OperacionTresDirecciones.ETIQUETA, decl.getEtiqueta());
			// Probablemente en este caso no es importante pero el nivel de profundidad
			// asociado al preambulo esta en el bloque de activacion superior
			// debido a que se crea aqui
			I3DUtils.crea(OperacionTresDirecciones.PREAMBULO, decl);

      // Dummy construct to pass the information upwards
      RESULT = new SimboloFuncionDecl(decl, null, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcname",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcname ::= FUNCTION TVOID VID 
            {
              SimboloFuncionDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
      DeclaracionFuncion decl = null;
      try{
          decl = GlobalVariables.asignaFuncionID(i, Tipo.getTipo(Tipo.Void));
      } catch(ErrorSemantico e) {
          ErrorHandler.reportaError(e);
      }
			
			// Probablemente el entra bloque deberia estar en otro lado. Pero por ahora
			// no me pienso preocupar mas. Ahora mismo el problema que podriamos
			// observar es que no deja redeclarar los parametros de las funciones
			// Esto funciona asi en java. Ahora mismo lo dejo tal cual.
      GlobalVariables.entraBloqueFuncion(decl);
      GlobalVariables.asignaEntornoFuncionID(i);
   
			// Genera lo necesario para poder dirigir las llamadas al procedimiento
			I3DUtils.crea(OperacionTresDirecciones.ETIQUETA, decl.getEtiqueta());
			I3DUtils.crea(OperacionTresDirecciones.PREAMBULO, decl);

      // Dummy construct to pass the information upwards
      RESULT = new SimboloFuncionDecl(decl, null, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcname",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcionInvk ::= VID PARENIZQ params PARENDER 
            {
              SimboloFuncionInvk RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloParams p = (SimboloParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			DeclaracionFuncion funcionInvocada = null;
			DeclaracionFuncion funcionInvocadora = null;
			try{
					funcionInvocada = GlobalVariables.compruebaFuncionID(i);
					TypeCheck.parameterMatch(i,p);

					EntornoFuncion entorno = (EntornoFuncion)GlobalVariables.entornoFuncionActual();
					funcionInvocadora = (DeclaracionFuncion)entorno.getIdentificador();

					SimboloParams previous = null;
					SimboloParams param = p;
					while(param != null) {							
							previous = param;
							param = param.getNextParam();
					}
				
					if (previous != null) {
							previous.markLastParam();
					}

			}catch(ErrorSemantico e){
					ErrorHandler.reportaError(e);
			}

			Declaracion declRetorno = null;
			if (funcionInvocada.hasRetorno()) {
					declRetorno = GlobalVariables.crearVariableTemporal(funcionInvocada.getTipo());			
					// Generamos la llamada
					I3DUtils.crea(OperacionTresDirecciones.LLAMADA, funcionInvocada, funcionInvocadora, declRetorno);
			} else {
					I3DUtils.crea(OperacionTresDirecciones.LLAMADA, funcionInvocada, funcionInvocadora);
			}

			RESULT = new SimboloFuncionInvk(funcionInvocada, declRetorno, i, p);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionInvk",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // args ::= argDecl nextArg 
            {
              SimboloArgs RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloArgDecl a = (SimboloArgDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloArgs n = (SimboloArgs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
																RESULT = new SimboloArgs(a,n,true);
															
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // args ::= 
            {
              SimboloArgs RESULT =null;
		 
																RESULT = null;
															
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nextArg ::= COMA argDecl nextArg 
            {
              SimboloArgs RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloArgDecl d = (SimboloArgDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloArgs n = (SimboloArgs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
																RESULT = new SimboloArgs(d,n,false);
															
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nextArg",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nextArg ::= 
            {
              SimboloArgs RESULT =null;
		 
																RESULT = null;
															
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nextArg",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argDecl ::= TVAR VID arrayDef 
            {
              SimboloArgDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloArray a = (SimboloArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  try{
																	if(a!=null)
																		GlobalVariables.asignaFuncionArgArray(i,t,a);
																	else
																		GlobalVariables.asignaFuncionArg(i,t);
																}catch(ErrorSemantico e){
																	ErrorHandler.reportaError(e);
																}
																RESULT = new SimboloArgDecl(i,Tipo.getTipoSafe(t),a);
															
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contenido ::= contenido expresion 
            {
              SimboloContenido RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloContenido c = (SimboloContenido)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloExpresion e = (SimboloExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimboloContenido(c,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contenido ::= contenido condicional 
            {
              SimboloContenido RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloContenido c = (SimboloContenido)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloCondicional d = (SimboloCondicional)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimboloContenido(c,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contenido ::= contenido bucle 
            {
              SimboloContenido RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloContenido c = (SimboloContenido)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloBucle b = (SimboloBucle)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimboloContenido(c,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contenido ::= contenido TRETURN Operacion PUNTOCOMA 
            {
              SimboloContenido RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SimboloContenido c = (SimboloContenido)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					try{
							TypeCheck.returnTypeMatch(o);
					} catch(ErrorSemantico e) {
							ErrorHandler.reportaError(e);
					}
					DeclaracionFuncion declaracion = (DeclaracionFuncion) GlobalVariables.entornoActual().getIdentificador();
					I3DUtils.crea(OperacionTresDirecciones.RETORNO, declaracion, o.getDeclaracionResultado());
					RESULT = new SimboloContenido(c,r,o); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contenido ::= 
            {
              SimboloContenido RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bucle ::= cond_bucle LLAVEIZQ contenido LLAVEDER 
            {
              SimboloBucle RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SimboloCondicionBucle cb = (SimboloCondicionBucle)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloContenido o = (SimboloContenido)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				I3DUtils.crea(OperacionTresDirecciones.GOTO, cb.getEtiquetaStart());
				I3DUtils.crea(OperacionTresDirecciones.ETIQUETA, cb.getEtiquetaFin());
				RESULT = new SimboloBucle(cb, o);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond_bucle ::= TWHILE PARENIZQ M1 Operacion PARENDER 
            {
              SimboloCondicionBucle RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloEtiqueta start = (SimboloEtiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				try{
						TypeCheck.checkBoolean(o, true);
				} catch(ErrorSemantico e) {
						ErrorHandler.reportaError(e);
				}
				String etFin = GlobalVariables.generarEtiqueta();
				Declaracion falseTemp = GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.Boolean), "false");
				// TODO No se como tenemos que generar el falso aquí. Tal vez como una constante global ??
				I3DUtils.crea(OperacionTresDirecciones.EQ, o.getDeclaracionResultado(), falseTemp, etFin);
				RESULT = new SimboloCondicionBucle(o, start.getEtiqueta(), etFin);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_bucle",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // M1 ::= 
            {
              SimboloEtiqueta RESULT =null;
		 
				String etStart = GlobalVariables.generarEtiqueta();
				I3DUtils.crea(OperacionTresDirecciones.ETIQUETA, etStart);
				RESULT = new SimboloEtiqueta(etStart);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicional ::= cond_main_block condelse 
            {
              SimboloCondicional RESULT =null;
		int cmbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloCondicionalBloquePrincipal cmb = (SimboloCondicionalBloquePrincipal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloCondElse e = (SimboloCondElse)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				I3DUtils.crea(OperacionTresDirecciones.ETIQUETA, cmb.getEtiqueta());
        RESULT = new SimboloCondicional(cmb, e);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond_main_block ::= clausula_cond LLAVEIZQ contenido LLAVEDER 
            {
              SimboloCondicionalBloquePrincipal RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SimboloClausulaCondicion cc = (SimboloClausulaCondicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloContenido c = (SimboloContenido)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		     String etFin = GlobalVariables.generarEtiqueta();
				 I3DUtils.crea(OperacionTresDirecciones.GOTO, etFin);
				 I3DUtils.crea(OperacionTresDirecciones.ETIQUETA, cc.getEtiqueta());
				 RESULT = new SimboloCondicionalBloquePrincipal(cc, c, etFin);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_main_block",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // clausula_cond ::= TIF PARENIZQ Operacion PARENDER 
            {
              SimboloClausulaCondicion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					try {
						TypeCheck.checkBoolean(o, false);
					} catch(ErrorSemantico e) {
						ErrorHandler.reportaError(e);
					} 
  	      String et = GlobalVariables.generarEtiqueta();
					// TODO Forma hacky de hacer que el valor constante False esté en el codigo.
					// Además el valor false y true deberían estar codificados en algun lado para reusarlo
					// en el codigo
					Declaracion falseTemp = GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.Boolean), "false");
					// TODO No se como tenemos que generar el falso aquí. Tal vez como una constante global ??
					I3DUtils.crea(OperacionTresDirecciones.EQ, o.getDeclaracionResultado(), falseTemp, et);
					RESULT = new SimboloClausulaCondicion(o, et);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clausula_cond",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condelse ::= TELSE LLAVEIZQ contenido LLAVEDER 
            {
              SimboloCondElse RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloContenido e = (SimboloContenido)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimboloCondElse(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condelse",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condelse ::= 
            {
              SimboloCondElse RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condelse",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= asignacion 
            {
              SimboloExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloAsignacion a = (SimboloAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimboloExpresion(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= declaracion 
            {
              SimboloExpresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloDeclaracion d = (SimboloDeclaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimboloExpresion(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= funcionInvk PUNTOCOMA 
            {
              SimboloExpresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloFuncionInvk f = (SimboloFuncionInvk)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimboloExpresion(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Operacion ::= Operacion1 
            {
              SimboloOperacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				SimboloOperacion operacion = new SimboloOperacion(o);
				operacion.setDeclaracionResultado(o.getDeclaracionResultado());
				RESULT = operacion; 
				
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Operacion ::= Operacion OPSUMA Operacion 
            {
              SimboloOperacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloOperacion q = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				Declaracion declResultadoSuma = null;
				try {
					TypeCheck.typesMatch(o.getTipoSubyacente(), TipoOperador.getTipoOperador(s));
					TypeCheck.typesMatch(q.getTipoSubyacente(), TipoOperador.getTipoOperador(s));
					TypeCheck.typesMatch(o.getTipoSubyacente(), q.getTipoSubyacente());

					declResultadoSuma =  GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.Integer));
					I3DUtils.crea(I3DUtils.getTipoOperacion(s), o.getDeclaracionResultado(), q.getDeclaracionResultado(), declResultadoSuma);
				}catch(ErrorSemantico e){
					ErrorHandler.reportaError(e);
				}

				SimboloOperacion resultado = new SimboloOperacion(o,s,q);
				resultado.setDeclaracionResultado(declResultadoSuma);
				RESULT = resultado; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Operacion1 ::= Operacion2 
            {
              SimboloOperacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				SimboloOperacion operacion = new SimboloOperacion(o);
				operacion.setDeclaracionResultado(o.getDeclaracionResultado());
				RESULT = operacion; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Operacion1 ::= Operacion OPPROD Operacion 
            {
              SimboloOperacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloOperacion q = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				Declaracion declResultadoProd = null;
				try{
					TypeCheck.typesMatch(o.getTipoSubyacente(), TipoOperador.getTipoOperador(p));
					TypeCheck.typesMatch(q.getTipoSubyacente(), TipoOperador.getTipoOperador(p));
					TypeCheck.typesMatch(o.getTipoSubyacente(), q.getTipoSubyacente());

					declResultadoProd =  GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.Integer));
					I3DUtils.crea(I3DUtils.getTipoOperacion(p), o.getDeclaracionResultado(), q.getDeclaracionResultado(), declResultadoProd);
				} catch(ErrorSemantico e) {
					ErrorHandler.reportaError(e);
				}

				SimboloOperacion resultado = new SimboloOperacion(o,p,q);
				resultado.setDeclaracionResultado(declResultadoProd);
				RESULT = resultado; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Operacion2 ::= Operacion3 
            {
              SimboloOperacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				SimboloOperacion operacion = new SimboloOperacion(o);
				operacion.setDeclaracionResultado(o.getDeclaracionResultado());
				RESULT = operacion; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Operacion2 ::= Operacion COMPARADOR Operacion 
            {
              SimboloOperacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloOperacion q = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				Declaracion declResultado = null;
				try{
					TypeCheck.typesMatch(o.getTipoSubyacente(), TipoOperador.getTipoOperador(c));
					TypeCheck.typesMatch(q.getTipoSubyacente(), TipoOperador.getTipoOperador(c));
					TypeCheck.typesMatch(o.getTipoSubyacente(), q.getTipoSubyacente());

					declResultado =  GlobalVariables.crearVariableTemporal(Tipo.getTipo(Tipo.Boolean));
					I3DUtils.crea(I3DUtils.getTipoOperacion(c), o.getDeclaracionResultado(), q.getDeclaracionResultado(), declResultado);
				} catch(ErrorSemantico e) {
					ErrorHandler.reportaError(e);
				}
				SimboloOperacion resultado = new SimboloOperacion(o,c,q);
				resultado.setDeclaracionResultado(declResultado);
				RESULT = resultado; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Operacion3 ::= factor 
            {
              SimboloOperacion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloFactor f = (SimboloFactor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				SimboloOperacion operacion = new SimboloOperacion(f);
				operacion.setDeclaracionResultado(f.getDeclaracionResultado());
				RESULT = operacion; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Operacion3 ::= Operacion OPLOGICO Operacion 
            {
              SimboloOperacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloOperacion q = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				Declaracion declResultado = null;
				try{
					TypeCheck.typesMatch(o.getTipoSubyacente(), TipoOperador.getTipoOperador(l));
					TypeCheck.typesMatch(q.getTipoSubyacente(), TipoOperador.getTipoOperador(l));
					TypeCheck.typesMatch(o.getTipoSubyacente(), q.getTipoSubyacente());

					declResultado =  GlobalVariables.crearVariableTemporal(Tipo.getTipo(Tipo.Boolean));
					I3DUtils.crea(I3DUtils.getTipoOperacion(l), o.getDeclaracionResultado(), q.getDeclaracionResultado(), declResultado);
				} catch(ErrorSemantico e) {
					ErrorHandler.reportaError(e);
				}
				SimboloOperacion resultado = new SimboloOperacion(o,l,q);
				resultado.setDeclaracionResultado(declResultado);
				RESULT = resultado; 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= VID arrayAsig 
            {
              SimboloFactor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloArray a = (SimboloArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Declaracion decl = null;
        try{
            decl = GlobalVariables.compruebaID(i);
						boolean isDeclaracionArray = decl instanceof DeclaracionArray;

						if (a != null && !isDeclaracionArray) {
								// Estamos intentando dereferenciar una variables simple!
								throw new ErrorSemantico("Se ha intentado dereferenciar la variable simple: " + i);
						}


						if (!isDeclaracionArray) {
								// Esto ya es una variable o una constante declarada en nuestra tabla de simbolos
								// asi que no es necesario crear una variable tempral
								RESULT = new SimboloFactor(decl);
						} else if (a == null) {
								// TODO Esto no esta implementado. ¿Como debemos gestionarlo?
								// Si usaramos memoria dinamica ( heap ) esto seria tan sencillo
								// como asignar un valor a otro.
						} else {
								DeclaracionArray declArray = (DeclaracionArray) decl;
								Declaracion variable = GlobalVariables.crearVariableTemporal(declArray.getTipoDato());
								DeclaracionConstante indice = GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.Integer), a.getNumero());
								// Estamos accediendo a un array
								I3DUtils.crea(OperacionTresDirecciones.CARGAR_INDIRECCION, declArray, indice, variable);
								RESULT = new SimboloFactor(declArray, a.getNumero());
						}
				}catch(ErrorSemantico e){
						ErrorHandler.reportaError(e);
				}
				// TODO Aqui se ha quitado el parametro. Probablemente se debería
				// pasar para pintar todo como toca en el arbol.
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= VNUMERO 
            {
              SimboloFactor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	DeclaracionConstante decl =  GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.Integer), n);
				Declaracion varDecl = GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.Integer));
				I3DUtils.crea(OperacionTresDirecciones.COPIA, decl, varDecl);
				// TODO Aqui se ha quitado el parametro que pasaba el número. Probablemente se debería
				// pasar para pintar todo como toca en el arbol.
        RESULT = new SimboloFactor(varDecl);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= VBOOLEANO 
            {
              SimboloFactor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			 	DeclaracionConstante decl =  GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.Boolean), b);
				Declaracion varDecl = GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.Boolean));
				I3DUtils.crea(OperacionTresDirecciones.COPIA, decl, varDecl);				
				// TODO Aqui se ha quitado el parametro. Probablemente se debería
				// pasar para pintar todo como toca en el arbol.
        RESULT = new SimboloFactor(varDecl);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= VSTRING 
            {
              SimboloFactor RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    			OverflowCheck.string(s);
			 	DeclaracionConstante decl =  GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.String), s);
				Declaracion varDecl = GlobalVariables.crearVariableTemporal(Tipo.getTipoSafe(Tipo.String));
				I3DUtils.crea(OperacionTresDirecciones.COPIA, decl, varDecl);				
				// TODO Aqui se ha quitado el parametro. Probablemente se debería
				// pasar para pintar todo como toca en el arbol.
        RESULT = new SimboloFactor(varDecl); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= funcionInvk 
            {
              SimboloFactor RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloFuncionInvk f = (SimboloFuncionInvk)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				// En este punto solo tenemos que propagar la declaración del retorno para poder tener en cuenta la variable
				// en otras partes del codigo
        RESULT = new SimboloFactor(f.getDeclaracion()); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= PARENIZQ Operacion PARENDER 
            {
              SimboloFactor RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
        RESULT = new SimboloFactor(o.getDeclaracionResultado()); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // params ::= Operacion nextParam 
            {
              SimboloParams RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloParams n = (SimboloParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				// Generamos las instrucciones para empilar cada uno de los parametros.
				Param param = (Param)I3DUtils.crea(OperacionTresDirecciones.PARAM, o.getDeclaracionResultado());
				RESULT = new SimboloParams(o,n,true, param); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // params ::= 
            {
              SimboloParams RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // nextParam ::= COMA Operacion nextParam 
            {
              SimboloParams RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloOperacion o = (SimboloOperacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimboloParams n = (SimboloParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				Param param = (Param)I3DUtils.crea(OperacionTresDirecciones.PARAM, o.getDeclaracionResultado());
				RESULT = new SimboloParams(o,n,false, param); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nextParam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // nextParam ::= 
            {
              SimboloParams RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nextParam",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
