package analisisSintactico;

import Checkers.Tipo;
import Checkers.TipoOperador;
import Checkers.TypeCheck;
import Procesador.GlobalVariables;
import SimbolosNoTerminales.*;
import Procesador.Identificador;

terminal    String			TCLASS, TVAR, TRETURN, TVOID, TIF, TELSE, LLAVEIZQ, LLAVEDER;
terminal    String			IGUAL, PUNTOCOMA, COMA, PARENIZQ, PARENDER;
terminal	String			COMPARADOR, OPLOGICO, VBOOLEANO, OPSUMA, OPPROD;
terminal	String			VSTRING;
terminal	String			VNUMERO;
terminal	String			VID;

non terminal	SimboloCondicional	condicional;
non terminal	SimboloCondElse		condelse;
non terminal	SimboloExpresion	expresion;
non terminal	SimboloPrograma		programa;
non terminal	SimboloClase		clase;
non terminal	SimboloCuerpo		cuerpo;
non terminal	SimboloElemento		elemento;
non terminal	SimboloAsignacion	asignacion;
non terminal  	SimboloFactor		factor;
non terminal	SimboloOperacion	Operacion;
non terminal	SimboloOperacion	Operacion1;
non terminal	SimboloOperacion	Operacion2;
non terminal	SimboloOperacion	Operacion3;
non terminal  	SimboloFuncionInvk	funcionInvk;
non terminal	SimboloFuncionDecl	funcionDecl;
non terminal	SimboloArgs			args;
non terminal	SimboloArgs			nextArg;
non terminal	SimboloContenido	contenido;
non terminal	SimboloParams		params;
non terminal	SimboloParams		nextParam;

precedence left OPSUMA, OPPROD;
precedence left OPLOGICO, COMPARADOR;

start with programa;

programa ::=  												{: GlobalVariables.entraBloqueClase(null);
															:}
			clase:c
															{: GlobalVariables.saleBloqueClase();
																RESULT = new SimboloPrograma(c);
															:}
			;
			
clase	::=	TCLASS:t VID:i 									{: GlobalVariables.asignaClaseID(i);
															:}
			LLAVEIZQ 										{: GlobalVariables.entraBloqueClase(new Identificador(i, Tipo.Class));
															:}
			cuerpo:c										{: GlobalVariables.saleBloqueClase();
																
															:}
			LLAVEDER										{: RESULT = new SimboloClase(i,c);
															:}
			;
			
cuerpo ::= cuerpo:c elemento:e 								{: RESULT = new SimboloCuerpo(c,e); :}
			|												{: RESULT = null; :}
			;
			
elemento ::= asignacion:a 									{: RESULT = new SimboloElemento(a); :}
			| funcionDecl:f									{: RESULT = new SimboloElemento(f); :}
			| clase:c										{: RESULT = new SimboloElemento(c); :}
			;
			
asignacion ::= TVAR:t VID:i									{: GlobalVariables.asignaID(i,t);
															:}
				IGUAL Operacion:o PUNTOCOMA 				{: TypeCheck.typesMatch(Tipo.getTipo(t), o.getTipoSubyacente());
																RESULT = new SimboloAsignacion(t,i,o);
															:}
			| TVAR:t VID:i PUNTOCOMA 						{: GlobalVariables.asignaID(i,t);
																RESULT = new SimboloAsignacion(t,i);
															:}
			| VID:i 											{: GlobalVariables.compruebaID(i);
															:}
				IGUAL Operacion:o PUNTOCOMA 				{: TypeCheck.typesMatch(GlobalVariables.entornoActual().fullGet(i).getTipo(), o.getTipoSubyacente());
																RESULT = new SimboloAsignacion(i,o);
															:}
			;

funcionDecl ::= TVAR:t VID:i 								{: GlobalVariables.asignaFuncionID(i,t);
															:}
				PARENIZQ									{: GlobalVariables.entraBloqueFuncion(new Identificador(i, Tipo.getTipo(t)));
																GlobalVariables.asignaEntornoFuncionID(i);
															:}
				args:a										{: GlobalVariables.asignaFuncionArgs(i,a);
															:}
				PARENDER LLAVEIZQ							{: :}
				contenido:c									{: GlobalVariables.saleBloqueFuncion();
															:}
				LLAVEDER									{: RESULT = new SimboloFuncionDecl(i,Tipo.getTipo(t),a,c);
															:}
				|
				TVOID:t VID:i 								{: GlobalVariables.asignaFuncionID(i,Tipo.Void);
															:}
				PARENIZQ									{: GlobalVariables.entraBloqueFuncion(new Identificador(i, Tipo.Void));
																GlobalVariables.asignaEntornoFuncionID(i);
															:}
				args:a										{: GlobalVariables.asignaFuncionArgs(i,a);
															:}
				PARENDER LLAVEIZQ							{: :}
				contenido:c									{: GlobalVariables.saleBloqueFuncion();
															:}
				LLAVEDER									{: RESULT = new SimboloFuncionDecl(i,Tipo.Void,a,c);
															:}
			;
		
funcionInvk ::= VID:i										{: GlobalVariables.compruebaFuncionID(i);
															:}
				PARENIZQ params:p 							{: TypeCheck.parameterMatch(i,p); :}
				PARENDER									{: RESULT = new SimboloFuncionInvk(i,p);
															:}
		;
		
args ::= TVAR:t VID:i 										{: GlobalVariables.asignaID(i,t);
															:}
			nextArg:n										{: RESULT = new SimboloArgs(t,i,n,true);
															:}
		| 													{: RESULT = null;
															:}
		;

nextArg ::= COMA TVAR:t VID:i 								{: GlobalVariables.asignaID(i,t);
															:}
				nextArg:n									{: RESULT = new SimboloArgs(t,i,n,false);
															:}
		|													{: RESULT = null;
															:}
		;
		
contenido ::= contenido:c expresion:e						{: RESULT = new SimboloContenido(c,e); :}
			| contenido:c condicional:d						{: RESULT = new SimboloContenido(c,d); :}
			| contenido:c TRETURN:r Operacion:o PUNTOCOMA	{: TypeCheck.returnTypeMatch(o);
																RESULT = new SimboloContenido(c,r,o); :}
			| 												{: RESULT = null; :}
			;

condicional ::= TIF PARENIZQ Operacion:o 					{: TypeCheck.checkBoolean(o); :}
				PARENDER LLAVEIZQ							{: :}
				contenido:c 								{: :}
				LLAVEDER									{: :}
				condelse:e									{: RESULT = new SimboloCondicional(o,c,e); :}
			;
			
condelse ::= TELSE LLAVEIZQ 								{: :}
				contenido:e 								{: :}
				LLAVEDER									{: RESULT = new SimboloCondElse(e); :}
			|												{: RESULT = null; :}
			;
			
expresion ::= asignacion:a 									{: RESULT = new SimboloExpresion(a); :}
			| funcionInvk:f PUNTOCOMA						{: RESULT = new SimboloExpresion(f); :}
			;
		
Operacion ::= Operacion1:o									{: RESULT = new SimboloOperacion(o); :}
		| Operacion:o OPSUMA:s Operacion:q						{: TypeCheck.typesMatch(o.getTipoSubyacente(), TipoOperador.getTipoOperador(s));
																TypeCheck.typesMatch(q.getTipoSubyacente(), TipoOperador.getTipoOperador(s));
																TypeCheck.typesMatch(o.getTipoSubyacente(), q.getTipoSubyacente());
																RESULT = new SimboloOperacion(o,s,q); :}
		;
	
Operacion1 ::= Operacion2:o									{: RESULT = new SimboloOperacion(o); :}
		| Operacion:o OPPROD:p Operacion:q					{: TypeCheck.typesMatch(o.getTipoSubyacente(), TipoOperador.getTipoOperador(p));
																TypeCheck.typesMatch(q.getTipoSubyacente(), TipoOperador.getTipoOperador(p));
																TypeCheck.typesMatch(o.getTipoSubyacente(), q.getTipoSubyacente());
																RESULT = new SimboloOperacion(o,p,q); :}
		;
		
Operacion2 ::= Operacion3:o									{: RESULT = new SimboloOperacion(o); :}
		| Operacion:o COMPARADOR:c Operacion:q 				{: TypeCheck.typesMatch(o.getTipoSubyacente(), TipoOperador.getTipoOperador(c));
																TypeCheck.typesMatch(q.getTipoSubyacente(), TipoOperador.getTipoOperador(c));
																TypeCheck.typesMatch(o.getTipoSubyacente(), q.getTipoSubyacente());
																RESULT = new SimboloOperacion(o,c,q); :}
		;
		
Operacion3 ::= factor:f 									{: RESULT = new SimboloOperacion(f); :}
		| Operacion:o OPLOGICO:l Operacion:q					{: TypeCheck.typesMatch(o.getTipoSubyacente(), TipoOperador.getTipoOperador(l));
																TypeCheck.typesMatch(q.getTipoSubyacente(), TipoOperador.getTipoOperador(l));
																TypeCheck.typesMatch(o.getTipoSubyacente(), q.getTipoSubyacente());
																RESULT = new SimboloOperacion(o,l,q); :}
		;
	
factor ::= VID:i 											{: GlobalVariables.compruebaID(i);
																RESULT = new SimboloFactor(i, Tipo.Identificador);
															:}
		| VNUMERO:n 										{: RESULT = new SimboloFactor(n, Tipo.Integer); :}
		| VBOOLEANO:b										{: RESULT = new SimboloFactor(b, Tipo.Boolean); :}
		| VSTRING:s											{: RESULT = new SimboloFactor(s, Tipo.String); :}
		| funcionInvk:f										{: RESULT = new SimboloFactor(f); :}
		| PARENIZQ Operacion:o PARENDER 					{: RESULT = new SimboloFactor(o); :}
		;
		
params ::= Operacion:o nextParam:n							{: RESULT = new SimboloParams(o,n,true); :}
		| 													{: RESULT = null; :}
		;

nextParam ::= COMA Operacion:o nextParam:n 					{: RESULT = new SimboloParams(o,n,false); :}
			| 												{: RESULT = null; :}
			;